"""
make_fsg.py generate an FSG or a JSGF for a marked up text file.

This module takes a text file, marked up with units (e.g. w for word, m for
morpheme) and ids and converted to IPA, and outputs an FSG or a JSGF
file for processing by PocketSphinx, SoundSwallower or SoundSwallower.js
"""


import datetime
import os

import chevron
from slugify import slugify

from readalongs.log import LOGGER

FSG_TEMPLATE = """FSG_BEGIN {{name}}
NUM_STATES {{num_states}}
START_STATE 0
FINAL_STATE {{final_state}}

{{#states}}
TRANSITION {{current}} {{next}} 1.0 {{id}}
{{/states}}
FSG_END
"""


def make_fsg(word_elements: list, filename: str = "'in-memory'") -> str:
    """Generate an FSG for the given words elements

    Returns: the text contents of the FSG file for processing by PocketSphinx
    """

    # If name includes special characters, pocketsphinx throws a RuntimeError:
    # new_Decoder returned -1, so pass it through slugify() first
    name = slugify(os.path.splitext(os.path.basename(filename))[0])
    data = {
        "name": name,
        "states": [],
        "num_states": 0,
    }

    for e in word_elements:
        if "id" not in e.attrib:  # don't put in elements with no id
            continue
        if not e.text or not e.text.strip():
            LOGGER.warning("No text in node %s", e.attrib["id"])
            continue
        text = e.text.strip()
        # if not e.text.strip():  # don't put in elements with no text
        #    continue
        data["states"].append(
            {
                "id": e.attrib["id"] if text else "",
                "current": data["num_states"],
                "next": data["num_states"] + 1,
            }
        )
        data["num_states"] += 1

    data["final_state"] = data["num_states"]
    data["num_states"] += 1

    return chevron.render(FSG_TEMPLATE, data)


JSGF_TEMPLATE = """#JSGF 1.0 UTF-8;
grammar {{name}};

/**
    * Auto-generated JSGF grammar for the document {{name}}.
    *
    * @author Automatically generated by make_jsgf
    * @version 1.0
    * @since {{date}}
    */

public <s> = {{#words}} {{id}} {{/words}} ;
"""


def make_jsgf(word_elements: list, filename: str = "'in-memory'") -> str:
    """Generate a JSGF for the given words elements

    JSGF = Java Speech Grammar Format

    Returns:
        the text contents of the JSGF file for processing by SoundSwallower.js
    """
    data = {
        "name": os.path.splitext(os.path.basename(filename))[0],
        "date": datetime.datetime.today().strftime("%Y-%m-%d"),
        "words": [],
    }

    for e in word_elements:
        if "id" not in e.attrib:  # don't put in elements with no id
            continue
        text = e.text.strip()
        if text == "":  # don't put in elements with no text
            continue
        data["words"].append({"id": e.attrib["id"]})

    return chevron.render(JSGF_TEMPLATE, data)
